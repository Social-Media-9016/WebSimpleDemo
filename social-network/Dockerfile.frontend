# 前端构建阶段
FROM node:16-alpine as build

# 设置工作目录
WORKDIR /app

# 安装构建工具
RUN apk add --no-cache python3 make g++

# 复制package文件
COPY package*.json ./

# 安装依赖
RUN npm ci

# 复制前端源代码
COPY public ./public
COPY src ./src
COPY .env* ./

# 构建React应用
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
RUN npm run build

# 最终阶段 - 使用Nginx提供服务
FROM nginx:alpine

# 安装curl用于健康检查
RUN apk add --no-cache curl

# 创建Nginx缓存目录
RUN mkdir -p /var/cache/nginx/client_temp /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp && chmod -R 755 /var/cache/nginx

# 复制nginx配置
COPY nginx.conf /etc/nginx/conf.d/default.conf

# 删除默认的静态资源
RUN rm -rf /usr/share/nginx/html/*

# 复制构建文件
COPY --from=build /app/build /usr/share/nginx/html

# 设置正确的权限
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# 添加健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# 暴露端口
EXPOSE 80

# 启动Nginx
CMD ["nginx", "-g", "daemon off;"] 